#!/usr/bin/env node

const crypto = require('crypto');
const Client = require('../lib/client');
const { DeviceAuthMessage } = require('../lib/proto');

const {
  androidMirroringAudioVideoAppId,
  castMirroringAudioVideoAppId,
  mediaReceiverAppId
} = require('../lib/apps');

const {
  connectionNamespace,
  deviceAuthNamespace,
  discoveryNamespace,
  heartbeatNamespace,
  multizoneNamespace,
  receiverNamespace,
  setupNamespace,
  webrtcNamespace
} = require('../lib/namespaces');

if (!process.argv[2]) {
  console.log('Usage:');
  console.log(`  ${process.argv[1]} <hostname>:<port>`);
  process.exit(1);
}

const parts = process.argv[2].split(':');

const castClient = new Client({
  host: parts[0],
  port: parts[1],
  rejectUnauthorized: false
});

let requestId = 1;

const handleConnection = (sourceId, destinationId, payload) => {
  console.debug('recv connection', {
    sourceId,
    destinationId,
    payload
  });
};

const handleDeviceAuthentication = (sourceId, destinationId, payload) => {
  const response = DeviceAuthMessage.parse(payload);

  console.debug('recv deviceauth', {
    sourceId,
    destinationId,
    response
  });

  {
    // connect to the receiver that we've just authenticated with
    const payloadUtf8 = JSON.stringify({
      type: 'CONNECT'
    });

    castClient.sendUtf8(connectionNamespace, payloadUtf8, destinationId, sourceId);
  }

  {
    // get application availability
    const payloadUtf8 = JSON.stringify({
      type: 'GET_APP_AVAILABILITY',
      appId: [
        androidMirroringAudioVideoAppId,
        castMirroringAudioVideoAppId,
        mediaReceiverAppId
      ],
      requestId: requestId++
    });

    castClient.sendUtf8(receiverNamespace, payloadUtf8, destinationId, sourceId);
  }

  {
    // get device status
    const payloadUtf8 = JSON.stringify({
      type: 'GET_STATUS',
      requestId: requestId++
    });

    castClient.sendUtf8(receiverNamespace, payloadUtf8, destinationId, sourceId);
  }

  {
    // get device info
    const payloadUtf8 = JSON.stringify({
      type: 'GET_DEVICE_INFO',
      requestId: requestId++
    });

    castClient.sendUtf8(discoveryNamespace, payloadUtf8, destinationId, sourceId);
  }
};

const handleDiscovery = (sourceId, destinationId, payload) => {
  console.debug('recv discovery', {
    sourceId,
    destinationId,
    payload
  });

  const payloadUtf8 = JSON.stringify({
    requestId: requestId++,
    type: 'GET_STATUS'
  });

  castClient.sendUtf8(multizoneNamespace, payloadUtf8, destinationId, sourceId);
};

const handleHeartbeat = (sourceId, destinationId, payload) => {
  console.debug('recv heartbeat', {
    sourceId,
    destinationId,
    payload
  });

  const payloadUtf8 = JSON.stringify({
    type: 'PONG'
  });

  castClient.sendUtf8(heartbeatNamespace, payloadUtf8, destinationId, sourceId);
};

const handleMultizone = (sourceId, destinationId, payload) => {
  console.debug('recv multizone', {
    sourceId,
    destinationId,
    payload
  });
};

const handleReceiver = (sourceId, destinationId, payload) => {
  console.debug('recv receiver', {
    sourceId,
    destinationId,
    payload
  });

  const message = JSON.parse(payload);
  if (message.type === 'RECEIVER_STATUS') {
    // check in mirroring app is running
    const app = message.status.applications 
      ? message.status.applications.find((app) => app.appId === mediaReceiverAppId)
      : null;

    if (!app) {
      // if not, request that application is lacunhed
      const payloadUtf8 = JSON.stringify({
        requestId: requestId++,
        type: "LAUNCH",
        appId: mediaReceiverAppId,
        language: "en-AU",
        supportedAppTypes: ["WEB"]
      });

      console.debug('send receiver', {
        destinationId: sourceId,
        sourceId: destinationId,
        payloadUtf8
      });

      castClient.sendUtf8(receiverNamespace, payloadUtf8, destinationId, sourceId);
      return;
    }

    // connect to application
    castClient.sendUtf8(connectionNamespace, JSON.stringify({
      type: 'CONNECT'
    }), 'source-0', app.transportId);

    const media = {
      // Here you can plug an URL to any mp4, webm, mp3 or jpg file with the proper contentType.
      contentId: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/big_buck_bunny_1080p.mp4',
      contentType: 'video/mp4',
      streamType: 'BUFFERED', // or LIVE

      // Title and cover displayed while buffering
      metadata: {
        type: 0,
        metadataType: 0,
        title: "Big Buck Bunny", 
        images: [
          { url: 'http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/images/BigBuckBunny.jpg' }
        ]
      }        
    };

    const response = JSON.stringify({
      data
    });

    // // send offer to app
    // const response = JSON.stringify({
    //   type: 'OFFER',
    //   seqNum: requestId++,
    //   offer: {
    //     castMode: "mirroring",
    //     receiverGetStatus: true,
    //     supportedStreams: [
    //       {
    //         aesIvMask: "51E2991F7B1491A8D90F477D75FF5FBC",
    //         aesKey: "D341A35D4CB10F1A32102BB1BF263A7F",
    //         bitRate: 102000,
    //         channels: 2,
    //         codecName: "opus",
    //         index: 0,
    //         receiverRtcpEventLog: true,
    //         rtpExtensions: "adaptive_playout_delay",
    //         rtpPayloadType: 127,
    //         rtpProfile: "cast",
    //         sampleRate: 48000,
    //         ssrc: 239298,
    //         targetDelay: 400,
    //         timeBase: "1/48000",
    //         type: "audio_source"
    //       },
    //       {
    //         aesIvMask: "51E2991F7B1491A8D90F477D75FF5FBC",
    //         aesKey: "D341A35D4CB10F1A32102BB1BF263A7F",
    //         codecName: "vp8",
    //         index: 1,
    //         maxBitRate: 5000000,
    //         maxFrameRate: "30000/1000",
    //         receiverRtcpEventLog: true,
    //         renderMode: "video",
    //         resolutions: [
    //           {
    //             height: 1080,
    //             width: 1920
    //           }
    //         ],
    //         rtpExtensions: "adaptive_playout_delay",
    //         rtpPayloadType: 96,
    //         rtpProfile: "cast",
    //         ssrc: 950039,
    //         targetDelay: 400,
    //         timeBase: "1/90000",
    //         type: "video_source"
    //       }
    //     ]
    //   }
    // });

    // console.debug('send webrtc', {
    //   destinationId: app.transportId,
    //   sourceId: 'source-0',
    //   payload: response
    // });

    castClient.sendUtf8(webrtcNamespace, response, 'source-0', app.transportId);

    return;
  }
  
  if (message.responseType === 'GET_APP_AVAILABILITY') {
    return;
  }

  console.warn('Unexpected receiver message', {
    message
  });
};

const handleSetup = (sourceId, destinationId, payload) => {
  console.log('recv setup', {
    sourceId,
    destinationId,
    payload
  });
};

castClient.on('message', ({
  destinationId,
  namespace,
  payloadBinary,
  payloadUtf8,
  sourceId
}) => {
  switch (namespace) {
    case connectionNamespace:
      handleConnection(sourceId, destinationId, payloadUtf8);
      break;
    case deviceAuthNamespace:
      handleDeviceAuthentication(sourceId, destinationId, payloadBinary);
      break;
    case discoveryNamespace:
      handleDiscovery(sourceId, destinationId, payloadUtf8);
      break;
    case heartbeatNamespace:
      handleHeartbeat(sourceId, destinationId, payloadUtf8);
      break;
    case multizoneNamespace:
      handleMultizone(sourceId, destinationId, payloadUtf8);
      break;
    case receiverNamespace:
      handleReceiver(sourceId, destinationId, payloadUtf8);
      break;
    case setupNamespace:
      handleSetup(sourceId, destinationId, payloadUtf8);
      break;
    case webrtcNamespace:
      console.log('webrtc', {
        payloadUtf8
      });
      break;
    default:
      console.log('unknown namespace', {
        namespace
      });
  }
});

castClient.connect(() => {
  const payloadBinary = {
    challenge: {
      hashAlgorithm: 1,
      signatureAlgorithm: 1,
      senderNonce: crypto.randomBytes(14)
    }
  };

  console.debug('send deviceauth', {
    destinationId: 'receiver-0',
    sourceId: 'sender-0',
    payloadBinary
  });

  castClient.sendBinary(
    deviceAuthNamespace,
    DeviceAuthMessage.serialize(payloadBinary),
    'sender-0',
    'receiver-0'
  );
});
